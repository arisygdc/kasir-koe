// Code generated by sqlc. DO NOT EDIT.
// source: query.sql

package postgres

import (
	"context"
	"database/sql"
)

const createDetailPesanan = `-- name: CreateDetailPesanan :exec
INSERT INTO detail_pesanan (pesanan_id, menu_id, harga, jumlah) VALUES ($1, $2, $3, $4)
`

type CreateDetailPesananParams struct {
	PesananID int32 `json:"pesanan_id"`
	MenuID    int32 `json:"menu_id"`
	Harga     int32 `json:"harga"`
	Jumlah    int32 `json:"jumlah"`
}

func (q *Queries) CreateDetailPesanan(ctx context.Context, arg CreateDetailPesananParams) error {
	_, err := q.db.ExecContext(ctx, createDetailPesanan,
		arg.PesananID,
		arg.MenuID,
		arg.Harga,
		arg.Jumlah,
	)
	return err
}

const createKategori = `-- name: CreateKategori :exec
INSERT INTO kategori (id, kategori) VALUES (DEFAULT, $1)
`

func (q *Queries) CreateKategori(ctx context.Context, kategori string) error {
	_, err := q.db.ExecContext(ctx, createKategori, kategori)
	return err
}

const createMeja = `-- name: CreateMeja :exec
INSERT INTO meja (nomor, dibuat_pada) VALUES ($1, DEFAULT)
`

func (q *Queries) CreateMeja(ctx context.Context, nomor int32) error {
	_, err := q.db.ExecContext(ctx, createMeja, nomor)
	return err
}

const createMenu = `-- name: CreateMenu :exec
INSERT INTO menu (id, kategori_id, menu, harga) VALUES (DEFAULT, $1, $2, $3)
`

type CreateMenuParams struct {
	KategoriID int32  `json:"kategori_id"`
	Menu       string `json:"menu"`
	Harga      int32  `json:"harga"`
}

func (q *Queries) CreateMenu(ctx context.Context, arg CreateMenuParams) error {
	_, err := q.db.ExecContext(ctx, createMenu, arg.KategoriID, arg.Menu, arg.Harga)
	return err
}

const createPembayaran = `-- name: CreatePembayaran :exec
INSERT INTO pembayaran (id, pesanan_id, bayar, dibayar_pada) VALUES (DEFAULT, $1, $2, DEFAULT)
`

type CreatePembayaranParams struct {
	PesananID int32 `json:"pesanan_id"`
	Bayar     int32 `json:"bayar"`
}

func (q *Queries) CreatePembayaran(ctx context.Context, arg CreatePembayaranParams) error {
	_, err := q.db.ExecContext(ctx, createPembayaran, arg.PesananID, arg.Bayar)
	return err
}

const createPesanan = `-- name: CreatePesanan :exec
INSERT INTO pesanan (id, kode, meja_nomor, dipesan_pada) VALUES (DEFAULT, $1, $2, DEFAULT)
`

type CreatePesananParams struct {
	Kode      string `json:"kode"`
	MejaNomor int32  `json:"meja_nomor"`
}

func (q *Queries) CreatePesanan(ctx context.Context, arg CreatePesananParams) error {
	_, err := q.db.ExecContext(ctx, createPesanan, arg.Kode, arg.MejaNomor)
	return err
}

const getHarga = `-- name: GetHarga :one
SELECT harga FROM menu WHERE id = $1
`

func (q *Queries) GetHarga(ctx context.Context, id int32) (int32, error) {
	row := q.db.QueryRowContext(ctx, getHarga, id)
	var harga int32
	err := row.Scan(&harga)
	return harga, err
}

const getMejaAll = `-- name: GetMejaAll :many
SELECT nomor FROM meja
`

func (q *Queries) GetMejaAll(ctx context.Context) ([]int32, error) {
	rows, err := q.db.QueryContext(ctx, getMejaAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int32
	for rows.Next() {
		var nomor int32
		if err := rows.Scan(&nomor); err != nil {
			return nil, err
		}
		items = append(items, nomor)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMenuAll = `-- name: GetMenuAll :many
SELECT kategori, menu, harga FROM menu RIGHT JOIN kategori ON menu.kategori_id = kategori.id
`

type GetMenuAllRow struct {
	Kategori string         `json:"kategori"`
	Menu     sql.NullString `json:"menu"`
	Harga    sql.NullInt32  `json:"harga"`
}

func (q *Queries) GetMenuAll(ctx context.Context) ([]GetMenuAllRow, error) {
	rows, err := q.db.QueryContext(ctx, getMenuAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetMenuAllRow
	for rows.Next() {
		var i GetMenuAllRow
		if err := rows.Scan(&i.Kategori, &i.Menu, &i.Harga); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPesananID = `-- name: GetPesananID :one
SELECT id FROM pesanan WHERE kode = $1
`

func (q *Queries) GetPesananID(ctx context.Context, kode string) (int32, error) {
	row := q.db.QueryRowContext(ctx, getPesananID, kode)
	var id int32
	err := row.Scan(&id)
	return id, err
}
